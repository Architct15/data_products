library(foreach)
foreach(i=unique(data.train[,2])); sample(x[,x[,2]==i], nrow(x[,x[,2]==i]))*3/4
foreach(i=unique(data.train[,2])) %do% sample(x[,x[,2]==i], nrow(x[,x[,2]==i]))*3/4
x1 <- sample(x, 100, replace=TRUE)
x2 <- sample(1:5, 100, replace=TRUE)
samplex <- by(x,x[,1],function(y){
by(y, y[,2], function(z){
z[sample(nrow(z),nrow(z)*3/4),]
}, simplify = TRUE)
})
samplex
?melt
melt.list
?melt.list
melt(samplex)
melt.list(samplex)
library(reshape2)
melt.list(samplex)
melt(samplex)
samplex <- for(i in unique(samplex[,1])) {
for (j in unique(samplex[,2])) {
cbind(samples, sample(x[,(x[1]==i) && (x[,2] == j)]))
}
}
samplex <- for(i in unique(samplex[,1])) {
for (j in unique(samplex[,2])) {
cbind(samples, sample(x[,(x[,1]==i) && (x[,2] == j)]))
}
}
unique(samplex[,1])
unique(samplex[,1])
samplex
samplex <- for(i in unique(x[,1])) {
for (j in unique(x[,2])) {
cbind(samples, sample(x[,(x[,1]==i) && (x[,2] == j)]))
}
}
samplex <- for(i in unique(x[,1])) {
for (j in unique(x[,2])) {
sample <- cbind(samples, sample(x[,(x[,1]==i) && (x[,2] == j)]))
}
}
sampleA <- sample(data.train4[,classe == "A"], nrow(data.train4[,classe == "A"])*3/4])
sampleA <- sample(data.train4[,classe == "A"], nrow(data.train4[,classe == "A"])*3/4)
sampleA <- sample(data.train4[,classe == "A"], nrow(data.train4[,data.train4$classe == "A"])*3/4)
sampleA <- sample(data.train4[,data.train4$classe == "A"], nrow(data.train4[,data.train4$classe == "A"])*3/4)
sampleA <- sample(data.train4[data.train4$classe == "A",], nrow(data.train4[data.train4$classe == "A",])*3/4)
dim(sampleA)
sampleA
dim(ddata.train4)
dim(data.train4)
nrow(data.train4[data.train4$classe == "A",])*3/4
data.train4[data.train4$classe == "A"]
data.train4[data.train4$classe == "A",]
str(data.train4)
summary(data.train4)
summary(data.train)
sampleA <- sample(data.train[data.train$classe == "A",], nrow(data.train[data.train$classe == "A",])*3/4)
nrow(data.train[data.train$classe == "A",])
nrow(data.train[data.train$classe == "A",])*3/4
nrow(data.train[data.train$classe == "A",])*3/4
sampleA <- sample(data.train[data.train$classe == "A",], nrow(data.train[data.train$classe == "A",])*3/4, replace=FALSE)
dim(data.train[data.train$classe == "A",])
x <- data.train[data.train$classe == "A",]
nx <- nrow(data.train[data.train$classe == "A",])*3/4
x
dim(x)
nx
dim(sample(x,nx,replace=FALSE))
dim(sample(x,1,replace=FALSE))
dim(sample(x,100,replace=FALSE))
dim(sample(x,4000,replace=FALSE))
dim(sample(x,1000,replace=FALSE))
dim(x)
dim(sample(x,160,replace=FALSE))
dim(sample(x,161,replace=FALSE))
dim(sample(x,size=1000,replace=FALSE))
length(x)
sampleA <- which(data.train[data.train$classe == "A",])
?which
sampleA <- which(data.train[data.train$classe == "A",])
dim(data.train[data.train$classe == "A",])
sampleA <- which(data.train[data.train$classe == "A",])
sampleA <- which(data.train$classe == "A")
length(sampleA)
top(sampleA)
head(sampleA)
str(sampleA)
summary(sampleA)
sampleA
View(sampleA)
sampleA <- data.train[data.train$classe == "A"]
sampleA <- data.train[data.train$classe == "A",]
dim(sampleA)
trainA <- floor(0.75*nrow(sampleA))
sampleA <- sample(sampleA, numA, replace=FALSE)
nA <- floor(0.75*nrow(sampleA))
sampleA <- sample(sampleA, nA, replace=FALSE)
tA <- nrow(sampleA)
nA <- floor(0.75*nrow(sampleA))
sampleA <- sampleA[sample(tA, nA, replace=FALSE),]
View(sampleA)
dim(sampleA)
?all
x1 <- sample(1:5, 100)
x1 <- sample(1:5, 100, replace=T)
x2 <- sample(NA, 100, replace=T)
x3 <- 1:100
y <- cbind(x1, x2, x3)
all(is.na(y))
apply(pmltest, 2, all(is.na(x)))
apply(pmltest, 2, function(x) = all(is.na(x)))
apply(pmltest, 2, function(x) all(is.na(x)))
library(caret)
pmltrain <- read.csv("course08/pml-training.csv")
pmltest <- read.csv("course08/pml-testing.csv")
apply(pmltest, 2, function(x) all(is.na(x)))
data.step1 <- pmltrain[,apply(pmltest, 2, function(x) all(is.na(x)))]
dim(data.step1)
data.step1 <- pmltrain[,- apply(pmltest, 2, function(x) all(is.na(x)))];dim(data.step1)
data.step1 <- pmltrain[,- apply(pmltest, 2, function(x) all(is.na(x)))];dim(data.step1)
summary(apply(pmltest, 2, function(x) all(is.na(x))))
data.step1 <- pmltrain[,-apply(pmltest, 2, function(x) all(is.na(x)))];dim(data.step1)
predict_columns <- pmltest[, ! all(is.na(data.test))]
data.step1 <- pmltrain[,-apply(pmltest, 2, function(x) all(is.na(x)))];dim(data.step1)
data.step1 <- pmltrain[, apply(pmltest, 2, function(x) all(!is.na(x)))];dim(data.step1)
if(length(nzrcols) > 0) {
data.step2 <- data.step1[,-nzrcols]
} else {
data.step2 <- data.step1
} dim(data.step2)
if(length(nzrcols) > 0) {
data.step2 <- data.step1[,-nzrcols]
} else {
data.step2 <- data.step1
}
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step2 <- data.step1[,-nzrcols]
} else {
data.step2 <- data.step1
}
dim(data.step2)
View(data.step2)
str(data.step1)
data.step2 <- data.step1[,-(1:7)]
str(data.step2)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
correlationMatrix <- cor(data.step3)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff = 0.9)
print(highlyCorrelated)
data.step4 <- data.step3[,-highlyCorrelated]; dim(data.step4)
cor(data$step3[,(10,1)])
cor(data$step3[,c(10,1)])
data.step1 <- pmltrain[, apply(pmltest, 2, function(x) all(!is.na(x)))];dim(data.step1)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
cor(data$step3[,10], data$step3[1])
cor(x=data$step3[,10], y=data$step3[1])
cor(x=data$step3[,10] ~ data$step3[1])
?cor
cor(x=data$step3[,10], y=data$step3[,1])
cor(x=data$step3[,10], y=data$step3[,1])
pmltrain <- read.csv("course08/pml-training.csv"); dim(pmltrain)
pmltest <- read.csv("course08/pml-testing.csv"); dim(pmltest)
data.step1 <- pmltrain[, apply(pmltest, 2, function(x) all(!is.na(x)))];dim(data.step1)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
str(data.step3)
str(pmltest)
pmltrain <- read.csv("course08/pml-training.csv"); dim(pmltrain)
pmltest <- read.csv("course08/pml-testing.csv"); dim(pmltest)
data.step1 <- pmltrain[, apply(pmltrain, 2, function(x) all(!is.na(x)))];dim(data.step1)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
View(data.step3)
table(data.step3)
summary(data.step3)
sum(data.step3[,1] != "")
data.step4 <- data.step3[,apply(data.step3, 2, function(x)sum(x!="")/nrows(data.step3 > 0.95))]
data.step4 <- data.step3[,apply(data.step3, 2, function(x)sum(x!="")/nrow(data.step3 > 0.95))]
summary(data.step4)
dim(data.step4)
30/160
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(x!="")/nrow(data.step3 > 0.95)))]
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(x!="")/nrow(data.step3 > 0.95)))];dim(data.step4)
summary(data.step4)
summary(data.step3)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(x!="")/nrow(data.step3) > 0.95))];dim(data.step4)
summary(data.step3)
sum(data.step4[,6] = "")
sum(data.step4[,6] == "")
sum(data.step4[,6] == " ")
sum(data.step4[,6] > " ")
sum(data.step4[,1] > " ")
sum(data.step4[,1] > "")
sum(data.step4[,6] > "")
sum(data.step4[,6] > " ")
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(x > " ")/nrow(data.step3) > 0.95))];dim(data.step4)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(x > " ")/nrow(data.step3) < 0.05))];dim(data.step4)
summary(data.step4)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) < 0.05))];dim(data.step4)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) < 0.05))];dim(data.step4);summary(data.step4)
sum(data.step4[,6] > " ")
sum(data.step3[,6] > " ")
sum(data.step3[,7] > " ")
str(data.step3)
sum(data.step3[,7] != " ")
sum(data.step3[,5] != " ")
sum(data.step3[,5] > " ")
sum(empty(data.step3[,5]))
sum(!grepl("^\\s+$|^$", data.step3[,5]))
sum(!grepl("^\\s+$|^$", data.step3[,6]))
nrow(data.step3)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) < 0.05))];dim(data.step4);summary(data.step4)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) > 0.05))];dim(data.step4);summary(data.step4)
fitgbm <- train(classe ~ ., data.step4, method="gbm")
fitgbm
dim(data.step3)
dim(data.step4)
dim(pmltest)
pmltest[,names(data.step4)]
pmltest[,names(data.step4[,-30])]
data.test <- pmltest[,names(data.step4[,-30])]
dim(data.test)
predict(fitgbm,newdata = data.test)
trellis.par.set(caretTheme())
plot(gbmFit2)
trellis.par.set(caretTheme())
plot(fitgbm)
fitgbm
library(caTools)
data.step4.sample = sample.split(data.step4$classe, SplitRatio = .75)
data.step4.train <- subset(data.step4, sample == TRUE)
data.step4.sample
data.step4.train <- data.step4[sample == TRUE,]
data.step4.train <- data.step4[sample,]
data.step4.train <- data.step4[which(sample),]
data.step4.train <- data.step4[which(sample) == TRUE,]
data.step4.train <- data.step4[data.step4.sample,]
dim(data.step4.train)
data.step4.testing <- data.step4[!data.step4.sample,]
data.step4.testing <- data.step4[!data.step4.sample,]
dim(data.step4.testing)
14716+4906
index = sample(1:nrow(data.step4), size=0.75*nrow(data.step4))
index
dim(data.step4[index,])
data.step4.sample = sample(1:nrow(data.step4), size = .75*nrow(data.step4))
data.step4.training <- data.step4[data.step4.sample,]
data.step4.testing <- data.step4[-data.step4.sample,]
dim(data.step4.training)
dim(data.step4.testing)
library(caret)
library(caTools)
set.seed(33833)
pmltrain <- read.csv("course08/pml-training.csv"); dim(pmltrain)
pmltest <- read.csv("course08/pml-testing.csv"); dim(pmltest)
data.step1 <- pmltrain[, apply(pmltrain, 2, function(x) all(!is.na(x)))];dim(data.step1)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) > 0.05))];dim(data.step4);summary(data.step4)
data.step4.sample = sample(1:nrow(data.step4), size = .75*nrow(data.step4))
data.step4.training <- data.step4[data.step4.sample,]
data.step4.testing <- data.step4[-data.step4.sample,]
fitgbm <- train(classe ~ ., data.step4.training, method="gbm")
fitgbm
data.step4.prediction <- predict(fitgbm, newdata = data.step4.testing[,-30])
data.test <- pmltest[,names(data.step4[,-30])]
predict(fitgbm,newdata = data.test)
trellis.par.set(caretTheme())
plot(gbmFit2)
plot(fitgbm)
library(caret)
set.seed(33833)
pmltrain <- read.csv("course08/pml-training.csv"); dim(pmltrain)
pmltest <- read.csv("course08/pml-testing.csv"); dim(pmltest)
data.step1 <- pmltrain[, apply(pmltrain, 2, function(x) all(!is.na(x)))];dim(data.step1)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) > 0.05))];dim(data.step4);summary(data.step4)
data.step4.sample = sample(1:nrow(data.step4), size = .75*nrow(data.step4))
data.step4.training <- data.step4[data.step4.sample,]
data.step4.testing <- data.step4[-data.step4.sample,]
fit.gbm.control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
fit.gbm <- train(classe ~ ., data.step4.training, method="gbm", trControl = fit.control)
fit.gbm <- train(classe ~ ., data.step4.training, method="gbm", trControl = fit.gbm.control)
hist(pmltrain)
hist(apply(pmltrain, 2, function(x) all(!isis.na(x)))))
hist(apply(pmltrain, 2, function(x) all(!isis.na(x))))
hist(apply(pmltrain, 2, function(x) all(!is.na(x))))
hist(apply(pmltrain, 2, function(x) sum(!is.na(x))))
hist(colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))
ggplot(NULL, aes(x=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram()
ggplot(NULL, aes(x=names(pmltrain), y=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram()
names(pmltrain)
?ggplot
ggplot(NULL, aes(x=names(pmltrain), y=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram()
ggplot(NULL, aes(x=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram()
ggplot(NULL, aes(x=names(pmltrain), y=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of non-NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of non-NA data")
ggplot(NULL, aes(x=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of non-NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of non-NA data")
ggplot(NULL, aes(x=colSums(is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of non-NA data")
install.packages(forecast)
install.packages("forecast")
library(forecast)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- svm(CompressiveStrength ~ ., data=training)
pred <- predict(fit,testing)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
accuracy(pred, testing$CompressiveStrength)
confusionMatrix(pred, testing$CompressiveStrength)
library(caret)
confusionMatrix(pred, testing$CompressiveStrength)
pred
testing$CompressiveStrength
library(caret)
set.seed(33833)
pmltrain <- read.csv("course08/pml-training.csv"); dim(pmltrain)
pmltest <- read.csv("course08/pml-testing.csv"); dim(pmltest)
ggplot(NULL, aes(x=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of non-NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of non-NA data")
data.step1 <- pmltrain[, apply(pmltrain, 2, function(x) all(!is.na(x)))];dim(data.step1)
data.step2 <- data.step1[,-(1:7)]; dim(data.step2)
nzrcols <- nearZeroVar(data.step1)
if(length(nzrcols) > 0) {
data.step3 <- data.step2[,-nzrcols]
} else {
data.step3 <- data.step2
}
dim(data.step3)
data.step4 <- data.step3[,apply(data.step3, 2, function(x)(sum(!grepl("^\\s+$|^$",x))/nrow(data.step3) > 0.05))];dim(data.step4);
data.step4.sample = createDataPartition(data.step4$classe, p=0.75, list=FALSE)
data.step4.training <- data.step4[data.step4.sample,]
data.step4.testing <- data.step4[-data.step4.sample,]
summary(data.step4.testing$classe)/summary(data.step4.training$classe)
fit.rf <- randomForest(classe ~.,data.step4.training, mtry=7)
library(randomForest)
fit.rf <- randomForest(classe ~.,data.step4.training, mtry=7)
fit.rf
data.step4.rf.prediction <- predict(fit.rf, newdata = data.step4.testing[,-30])
table(data.step4.rf.prediction, data.step4.testing$classe)
qplot(data.step4.rf.prediction, data.step4.testing$classe)
sqrt(sum((data.step4.rf.prediction - data.step4.testing$classe)^2))
confusionMatrix(data.step4.rf.prediction, data.step4.testing$classe)
accuracy(data.step4.rf.prediction, data.step4.testing$classe)
data.test <- pmltest[,names(data.step4[,-30])]
data.test.rf.prediction <- predict(fit.rf, newdata = data.test)
data.test.rf.prediction
fit.rf1 <- train(classe ~.,data.step4.training, method="rf",tuneGrid = data.frame(.mtry = 6))
control.rf <- trainControl(method="cv", number = 3, allowParallel = TRUE)
fit.rf1 <- train(classe ~.,data.step4.training, method="rf",tuneGrid = data.frame(.mtry = 6), trControl=control.rf)
fit.rf <- fit.rf1
fit.rf
data.step4.rf.prediction <- predict(fit.rf, newdata = data.step4.testing[,-30])
confusionMatrix(data.step4.rf.prediction, data.step4.testing$classe)
accuracy(data.step4.rf.prediction, data.step4.testing$classe)
data.test.rf.prediction <- predict(fit.rf, newdata = data.test)
data.test.rf.prediction
control.gbm <- trainControl(method="cv", number=3, allowParallel = TRUE)
fit.gbm <- train(classe ~ ., data.step4.training, method="gbm", trControl = control.gbm)
fit.gbm
data.step4.gbm.prediction <- predict(fit.gbm, newdata = data.step4.testing[,-30])
table(data.step4.gbm.prediction, data.step4.testing$classe)
confusionMatrix(data.step4.gbm.prediction, data.step4.testing$classe)
data.test.gbm.prediction <- predict(fit.gbm, newdata = data.test)
data.test.gbm.prediction
data.step5.testing <- data.frame(data.step4.rf.prediction, data.step4.gbm.prediction, data.step4,testing$classe)
nrow(data.step4.testing)
17/4904
ggplot(NULL, aes(y=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of non-NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of non-NA data")
ggplot(NULL, aes(x=colSums(!is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of non-NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of non-NA data")
ggplot(NULL, aes(x=colSums(is.na(pmltrain[,1:ncol(pmltrain)])))) + geom_histogram() +
xlab("Count of NA rows") +
ylab("Count of number of columns") +
ggtitle("Distribution of NA data")
fancyRpartPlot(fit.rf)
library(rattle)
fancyRpartPlot(fit.rf)
treeModel <- rpart(classe ~ ., data=data.step4.train, method="class")
library(rpart)
treeModel <- rpart(classe ~ ., data=data.step4.train, method="class")
fancyRpartPlot(treeModel)
pml_write_files(data.test.rf.prediction)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(data.test.rf.prediction)
?confusionMatrix
x <- confusionMatrix(data.step4.rf.prediction, data.step4.testing$classe)
x
x$Accuracy
x$positive
x$overall
x$overall[1]
x$overall
x$dots
x$table
pmltest <- read.csv("pml-testing.csv"); dim(pmltest)
rm(list=ls())
library(quantmod)
getSymbols("BABA")
BABA
head(BABA)
cl(BABA)
Cl(BABA)
candleChart(BABA)
addRSI(n=2)
getSymbols("ASHR")
candleChart(ASHR)
add_EMA(n=10)
addEMA(n=10)
addRSI(n=2)
library(TTR)
RSI(BABA, n=2)
RSI(Cl(BABA), n=2)
head(RSI(Cl(BABA), n=2))
tail(RSI(Cl(BABA), n=2))
tail(ATR(BABA, n=3))
BABA[2015,]
BABA[2015]
BABA['2015']
candleChart(ASHR['2015'])
addEMA(n=20)
library(quantmod)
getSymbols(BABA)
getSymbols("BABA")
head(BABA)
tail(BABA)
library(TTR)
ATR(BABA,n=3)
SMA(BABA,n=20)
?TTR
data(ttrc)
head(ttrc)
x.domicile <- c("UK", "HK", "US", "Cayman")
library(slidify)
Sys.which('git')
setwd("slidify")
setwd("StockAnalysis")
slidify("index.html")
slidify("index.Rml")
slidify("index.Rml")
slidify("index.Rmd")
publish_github("architect15", "stock_analysis")
git config --global user.email "chanhys@gmail.com"
publish_github("architect15", "stock_analysis")
